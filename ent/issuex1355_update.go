// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Naist4869/awesomeProject1/ent/issuex1355"
	"github.com/Naist4869/awesomeProject1/ent/predicate"
)

// IssueX1355Update is the builder for updating IssueX1355 entities.
type IssueX1355Update struct {
	config
	hooks    []Hook
	mutation *IssueX1355Mutation
}

// Where adds a new predicate for the IssueX1355Update builder.
func (ix *IssueX1355Update) Where(ps ...predicate.IssueX1355) *IssueX1355Update {
	ix.mutation.predicates = append(ix.mutation.predicates, ps...)
	return ix
}

// SetTime sets the "time" field.
func (ix *IssueX1355Update) SetTime(t time.Time) *IssueX1355Update {
	ix.mutation.SetTime(t)
	return ix
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ix *IssueX1355Update) SetNillableTime(t *time.Time) *IssueX1355Update {
	if t != nil {
		ix.SetTime(*t)
	}
	return ix
}

// ClearTime clears the value of the "time" field.
func (ix *IssueX1355Update) ClearTime() *IssueX1355Update {
	ix.mutation.ClearTime()
	return ix
}

// SetInt32 sets the "int32" field.
func (ix *IssueX1355Update) SetInt32(i int32) *IssueX1355Update {
	ix.mutation.ResetInt32()
	ix.mutation.SetInt32(i)
	return ix
}

// SetNillableInt32 sets the "int32" field if the given value is not nil.
func (ix *IssueX1355Update) SetNillableInt32(i *int32) *IssueX1355Update {
	if i != nil {
		ix.SetInt32(*i)
	}
	return ix
}

// AddInt32 adds i to the "int32" field.
func (ix *IssueX1355Update) AddInt32(i int32) *IssueX1355Update {
	ix.mutation.AddInt32(i)
	return ix
}

// ClearInt32 clears the value of the "int32" field.
func (ix *IssueX1355Update) ClearInt32() *IssueX1355Update {
	ix.mutation.ClearInt32()
	return ix
}

// SetStr sets the "str" field.
func (ix *IssueX1355Update) SetStr(s string) *IssueX1355Update {
	ix.mutation.SetStr(s)
	return ix
}

// SetNillableStr sets the "str" field if the given value is not nil.
func (ix *IssueX1355Update) SetNillableStr(s *string) *IssueX1355Update {
	if s != nil {
		ix.SetStr(*s)
	}
	return ix
}

// Mutation returns the IssueX1355Mutation object of the builder.
func (ix *IssueX1355Update) Mutation() *IssueX1355Mutation {
	return ix.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ix *IssueX1355Update) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ix.hooks) == 0 {
		affected, err = ix.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueX1355Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ix.mutation = mutation
			affected, err = ix.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ix.hooks) - 1; i >= 0; i-- {
			mut = ix.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ix.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ix *IssueX1355Update) SaveX(ctx context.Context) int {
	affected, err := ix.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ix *IssueX1355Update) Exec(ctx context.Context) error {
	_, err := ix.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ix *IssueX1355Update) ExecX(ctx context.Context) {
	if err := ix.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ix *IssueX1355Update) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   issuex1355.Table,
			Columns: issuex1355.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: issuex1355.FieldID,
			},
		},
	}
	if ps := ix.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ix.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: issuex1355.FieldTime,
		})
	}
	if ix.mutation.TimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: issuex1355.FieldTime,
		})
	}
	if value, ok := ix.mutation.Int32(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: issuex1355.FieldInt32,
		})
	}
	if value, ok := ix.mutation.AddedInt32(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: issuex1355.FieldInt32,
		})
	}
	if ix.mutation.Int32Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: issuex1355.FieldInt32,
		})
	}
	if value, ok := ix.mutation.Str(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issuex1355.FieldStr,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ix.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issuex1355.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// IssueX1355UpdateOne is the builder for updating a single IssueX1355 entity.
type IssueX1355UpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IssueX1355Mutation
}

// SetTime sets the "time" field.
func (ixo *IssueX1355UpdateOne) SetTime(t time.Time) *IssueX1355UpdateOne {
	ixo.mutation.SetTime(t)
	return ixo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ixo *IssueX1355UpdateOne) SetNillableTime(t *time.Time) *IssueX1355UpdateOne {
	if t != nil {
		ixo.SetTime(*t)
	}
	return ixo
}

// ClearTime clears the value of the "time" field.
func (ixo *IssueX1355UpdateOne) ClearTime() *IssueX1355UpdateOne {
	ixo.mutation.ClearTime()
	return ixo
}

// SetInt32 sets the "int32" field.
func (ixo *IssueX1355UpdateOne) SetInt32(i int32) *IssueX1355UpdateOne {
	ixo.mutation.ResetInt32()
	ixo.mutation.SetInt32(i)
	return ixo
}

// SetNillableInt32 sets the "int32" field if the given value is not nil.
func (ixo *IssueX1355UpdateOne) SetNillableInt32(i *int32) *IssueX1355UpdateOne {
	if i != nil {
		ixo.SetInt32(*i)
	}
	return ixo
}

// AddInt32 adds i to the "int32" field.
func (ixo *IssueX1355UpdateOne) AddInt32(i int32) *IssueX1355UpdateOne {
	ixo.mutation.AddInt32(i)
	return ixo
}

// ClearInt32 clears the value of the "int32" field.
func (ixo *IssueX1355UpdateOne) ClearInt32() *IssueX1355UpdateOne {
	ixo.mutation.ClearInt32()
	return ixo
}

// SetStr sets the "str" field.
func (ixo *IssueX1355UpdateOne) SetStr(s string) *IssueX1355UpdateOne {
	ixo.mutation.SetStr(s)
	return ixo
}

// SetNillableStr sets the "str" field if the given value is not nil.
func (ixo *IssueX1355UpdateOne) SetNillableStr(s *string) *IssueX1355UpdateOne {
	if s != nil {
		ixo.SetStr(*s)
	}
	return ixo
}

// Mutation returns the IssueX1355Mutation object of the builder.
func (ixo *IssueX1355UpdateOne) Mutation() *IssueX1355Mutation {
	return ixo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ixo *IssueX1355UpdateOne) Select(field string, fields ...string) *IssueX1355UpdateOne {
	ixo.fields = append([]string{field}, fields...)
	return ixo
}

// Save executes the query and returns the updated IssueX1355 entity.
func (ixo *IssueX1355UpdateOne) Save(ctx context.Context) (*IssueX1355, error) {
	var (
		err  error
		node *IssueX1355
	)
	if len(ixo.hooks) == 0 {
		node, err = ixo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueX1355Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ixo.mutation = mutation
			node, err = ixo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ixo.hooks) - 1; i >= 0; i-- {
			mut = ixo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ixo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ixo *IssueX1355UpdateOne) SaveX(ctx context.Context) *IssueX1355 {
	node, err := ixo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ixo *IssueX1355UpdateOne) Exec(ctx context.Context) error {
	_, err := ixo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ixo *IssueX1355UpdateOne) ExecX(ctx context.Context) {
	if err := ixo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ixo *IssueX1355UpdateOne) sqlSave(ctx context.Context) (_node *IssueX1355, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   issuex1355.Table,
			Columns: issuex1355.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: issuex1355.FieldID,
			},
		},
	}
	id, ok := ixo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing IssueX1355.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ixo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issuex1355.FieldID)
		for _, f := range fields {
			if !issuex1355.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != issuex1355.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ixo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ixo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: issuex1355.FieldTime,
		})
	}
	if ixo.mutation.TimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: issuex1355.FieldTime,
		})
	}
	if value, ok := ixo.mutation.Int32(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: issuex1355.FieldInt32,
		})
	}
	if value, ok := ixo.mutation.AddedInt32(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: issuex1355.FieldInt32,
		})
	}
	if ixo.mutation.Int32Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: issuex1355.FieldInt32,
		})
	}
	if value, ok := ixo.mutation.Str(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issuex1355.FieldStr,
		})
	}
	_node = &IssueX1355{config: ixo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ixo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issuex1355.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
