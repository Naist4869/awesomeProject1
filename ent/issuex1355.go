// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Naist4869/awesomeProject1/ent/issuex1355"
)

// IssueX1355 is the model entity for the IssueX1355 schema.
type IssueX1355 struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Int32 holds the value of the "int32" field.
	Int32 int32 `json:"int32,omitempty"`
	// Str holds the value of the "str" field.
	Str string `json:"str,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IssueX1355) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case issuex1355.FieldID, issuex1355.FieldInt32:
			values[i] = &sql.NullInt64{}
		case issuex1355.FieldStr:
			values[i] = &sql.NullString{}
		case issuex1355.FieldTime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IssueX1355", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IssueX1355 fields.
func (i *IssueX1355) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case issuex1355.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case issuex1355.FieldTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[j])
			} else if value.Valid {
				i.Time = value.Time
			}
		case issuex1355.FieldInt32:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int32", values[j])
			} else if value.Valid {
				i.Int32 = int32(value.Int64)
			}
		case issuex1355.FieldStr:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field str", values[j])
			} else if value.Valid {
				i.Str = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this IssueX1355.
// Note that you need to call IssueX1355.Unwrap() before calling this method if this IssueX1355
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *IssueX1355) Update() *IssueX1355UpdateOne {
	return (&IssueX1355Client{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the IssueX1355 entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *IssueX1355) Unwrap() *IssueX1355 {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: IssueX1355 is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *IssueX1355) String() string {
	var builder strings.Builder
	builder.WriteString("IssueX1355(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", time=")
	builder.WriteString(i.Time.Format(time.ANSIC))
	builder.WriteString(", int32=")
	builder.WriteString(fmt.Sprintf("%v", i.Int32))
	builder.WriteString(", str=")
	builder.WriteString(i.Str)
	builder.WriteByte(')')
	return builder.String()
}

// IssueX1355s is a parsable slice of IssueX1355.
type IssueX1355s []*IssueX1355

func (i IssueX1355s) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
