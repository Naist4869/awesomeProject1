// Code generated by entc, DO NOT EDIT.

package issuex1355

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Naist4869/awesomeProject1/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// Int32 applies equality check predicate on the "int32" field. It's identical to Int32EQ.
func Int32(v int32) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInt32), v))
	})
}

// Str applies equality check predicate on the "str" field. It's identical to StrEQ.
func Str(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStr), v))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.IssueX1355 {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.IssueX1355 {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTime)))
	})
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTime)))
	})
}

// Int32EQ applies the EQ predicate on the "int32" field.
func Int32EQ(v int32) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInt32), v))
	})
}

// Int32NEQ applies the NEQ predicate on the "int32" field.
func Int32NEQ(v int32) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInt32), v))
	})
}

// Int32In applies the In predicate on the "int32" field.
func Int32In(vs ...int32) predicate.IssueX1355 {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInt32), v...))
	})
}

// Int32NotIn applies the NotIn predicate on the "int32" field.
func Int32NotIn(vs ...int32) predicate.IssueX1355 {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInt32), v...))
	})
}

// Int32GT applies the GT predicate on the "int32" field.
func Int32GT(v int32) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInt32), v))
	})
}

// Int32GTE applies the GTE predicate on the "int32" field.
func Int32GTE(v int32) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInt32), v))
	})
}

// Int32LT applies the LT predicate on the "int32" field.
func Int32LT(v int32) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInt32), v))
	})
}

// Int32LTE applies the LTE predicate on the "int32" field.
func Int32LTE(v int32) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInt32), v))
	})
}

// Int32IsNil applies the IsNil predicate on the "int32" field.
func Int32IsNil() predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInt32)))
	})
}

// Int32NotNil applies the NotNil predicate on the "int32" field.
func Int32NotNil() predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInt32)))
	})
}

// StrEQ applies the EQ predicate on the "str" field.
func StrEQ(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStr), v))
	})
}

// StrNEQ applies the NEQ predicate on the "str" field.
func StrNEQ(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStr), v))
	})
}

// StrIn applies the In predicate on the "str" field.
func StrIn(vs ...string) predicate.IssueX1355 {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStr), v...))
	})
}

// StrNotIn applies the NotIn predicate on the "str" field.
func StrNotIn(vs ...string) predicate.IssueX1355 {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IssueX1355(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStr), v...))
	})
}

// StrGT applies the GT predicate on the "str" field.
func StrGT(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStr), v))
	})
}

// StrGTE applies the GTE predicate on the "str" field.
func StrGTE(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStr), v))
	})
}

// StrLT applies the LT predicate on the "str" field.
func StrLT(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStr), v))
	})
}

// StrLTE applies the LTE predicate on the "str" field.
func StrLTE(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStr), v))
	})
}

// StrContains applies the Contains predicate on the "str" field.
func StrContains(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStr), v))
	})
}

// StrHasPrefix applies the HasPrefix predicate on the "str" field.
func StrHasPrefix(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStr), v))
	})
}

// StrHasSuffix applies the HasSuffix predicate on the "str" field.
func StrHasSuffix(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStr), v))
	})
}

// StrEqualFold applies the EqualFold predicate on the "str" field.
func StrEqualFold(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStr), v))
	})
}

// StrContainsFold applies the ContainsFold predicate on the "str" field.
func StrContainsFold(v string) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStr), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IssueX1355) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IssueX1355) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IssueX1355) predicate.IssueX1355 {
	return predicate.IssueX1355(func(s *sql.Selector) {
		p(s.Not())
	})
}
