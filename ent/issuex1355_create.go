// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Naist4869/awesomeProject1/ent/issuex1355"
)

// IssueX1355Create is the builder for creating a IssueX1355 entity.
type IssueX1355Create struct {
	config
	mutation *IssueX1355Mutation
	hooks    []Hook
}

// SetTime sets the "time" field.
func (ix *IssueX1355Create) SetTime(t time.Time) *IssueX1355Create {
	ix.mutation.SetTime(t)
	return ix
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ix *IssueX1355Create) SetNillableTime(t *time.Time) *IssueX1355Create {
	if t != nil {
		ix.SetTime(*t)
	}
	return ix
}

// SetInt32 sets the "int32" field.
func (ix *IssueX1355Create) SetInt32(i int32) *IssueX1355Create {
	ix.mutation.SetInt32(i)
	return ix
}

// SetNillableInt32 sets the "int32" field if the given value is not nil.
func (ix *IssueX1355Create) SetNillableInt32(i *int32) *IssueX1355Create {
	if i != nil {
		ix.SetInt32(*i)
	}
	return ix
}

// SetStr sets the "str" field.
func (ix *IssueX1355Create) SetStr(s string) *IssueX1355Create {
	ix.mutation.SetStr(s)
	return ix
}

// SetNillableStr sets the "str" field if the given value is not nil.
func (ix *IssueX1355Create) SetNillableStr(s *string) *IssueX1355Create {
	if s != nil {
		ix.SetStr(*s)
	}
	return ix
}

// Mutation returns the IssueX1355Mutation object of the builder.
func (ix *IssueX1355Create) Mutation() *IssueX1355Mutation {
	return ix.mutation
}

// Save creates the IssueX1355 in the database.
func (ix *IssueX1355Create) Save(ctx context.Context) (*IssueX1355, error) {
	var (
		err  error
		node *IssueX1355
	)
	ix.defaults()
	if len(ix.hooks) == 0 {
		if err = ix.check(); err != nil {
			return nil, err
		}
		node, err = ix.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueX1355Mutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ix.check(); err != nil {
				return nil, err
			}
			ix.mutation = mutation
			node, err = ix.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ix.hooks) - 1; i >= 0; i-- {
			mut = ix.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ix.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ix *IssueX1355Create) SaveX(ctx context.Context) *IssueX1355 {
	v, err := ix.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ix *IssueX1355Create) defaults() {
	if _, ok := ix.mutation.Str(); !ok {
		v := issuex1355.DefaultStr
		ix.mutation.SetStr(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ix *IssueX1355Create) check() error {
	if _, ok := ix.mutation.Str(); !ok {
		return &ValidationError{Name: "str", err: errors.New("ent: missing required field \"str\"")}
	}
	return nil
}

func (ix *IssueX1355Create) sqlSave(ctx context.Context) (*IssueX1355, error) {
	_node, _spec := ix.createSpec()
	if err := sqlgraph.CreateNode(ctx, ix.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ix *IssueX1355Create) createSpec() (*IssueX1355, *sqlgraph.CreateSpec) {
	var (
		_node = &IssueX1355{config: ix.config}
		_spec = &sqlgraph.CreateSpec{
			Table: issuex1355.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: issuex1355.FieldID,
			},
		}
	)
	if value, ok := ix.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: issuex1355.FieldTime,
		})
		_node.Time = value
	}
	if value, ok := ix.mutation.Int32(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: issuex1355.FieldInt32,
		})
		_node.Int32 = value
	}
	if value, ok := ix.mutation.Str(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issuex1355.FieldStr,
		})
		_node.Str = value
	}
	return _node, _spec
}

// IssueX1355CreateBulk is the builder for creating many IssueX1355 entities in bulk.
type IssueX1355CreateBulk struct {
	config
	builders []*IssueX1355Create
}

// Save creates the IssueX1355 entities in the database.
func (ixb *IssueX1355CreateBulk) Save(ctx context.Context) ([]*IssueX1355, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ixb.builders))
	nodes := make([]*IssueX1355, len(ixb.builders))
	mutators := make([]Mutator, len(ixb.builders))
	for i := range ixb.builders {
		func(i int, root context.Context) {
			builder := ixb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssueX1355Mutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ixb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ixb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ixb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ixb *IssueX1355CreateBulk) SaveX(ctx context.Context) []*IssueX1355 {
	v, err := ixb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
